package main

import (
	"encoding/csv"
	"fmt"
	"log"
	"os"
	"strings"
	"sync"

	"github.com/gosimple/unidecode"
	"github.com/makaires77/ppgcs/pkg/usecase/nomecomparador"
)

func removeAccents(text string) string {
	return unidecode.Unidecode(text)
}

func main() {
	// Abrir o arquivo CSV com os nomes dos autores
	fileAuthors, err := os.Open("_data/powerbi/publicacoes.csv")
	if err != nil {
		log.Fatalf("Falha ao abrir o arquivo CSV de publicacoes: %v", err)
	}
	defer fileAuthors.Close()

	// Criar um leitor CSV com o conteúdo convertido para UTF-8
	readerAuthors := csv.NewReader(fileAuthors)
	readerAuthors.Comma = ';'
	readerAuthors.LazyQuotes = true

	// Ler os registros do arquivo CSV dos autores
	recordsAuthors, err := readerAuthors.ReadAll()
	if err != nil {
		log.Fatalf("Falha ao ler o arquivo CSV dos autores: %v", err)
	}

	// Verificar a quantidade de campos em cada linha
	for i, record := range recordsAuthors {
		fieldCount := len(record)
		fmt.Printf("Linha %d tem %d campos\n", i+1, fieldCount)

		// Tratar cada linha de acordo com a quantidade de campos
		if fieldCount == 1 {
			// Caso com 1 campo
			author := record[0]
			// Fazer algo com o autor
			fmt.Println(author)
		} else if fieldCount > 1 {
			// Caso com mais de 1 campo
			// Fazer algo com cada campo
			for j := 0; j < fieldCount; j++ {
				field := record[j]
				fmt.Println(field)
			}
		}
	}

	// Iterar sobre as linhas do arquivo CSV dos autores
	for _, record := range recordsAuthors {
		// Remover acentos dos nomes dos autores
		cleanAuthor := removeAccents(record[14])

		// Fazer algo com o nome do autor sem acentos
		fmt.Println(cleanAuthor)
	}

	fmt.Println("Tamanho dos registros dos autores:", len(recordsAuthors))
	fmt.Println("Linha 1 do registro dos autores:", recordsAuthors[1])

	// Abrir o arquivo CSV com os nomes dos discentes
	fileStudents, err := os.Open("_data/powerbi/lista_orientadores-discentes.csv")
	if err != nil {
		log.Fatalf("Falha ao abrir o arquivo CSV dos discentes: %v", err)
	}
	defer fileStudents.Close()

	// Criar um leitor CSV para o arquivo dos discentes
	readerStudents := csv.NewReader(fileStudents)
	readerStudents.Comma = ';'
	readerStudents.LazyQuotes = true

	// Ler os registros do arquivo CSV dos discentes
	recordsStudents, err := readerStudents.ReadAll()
	if err != nil {
		log.Fatalf("Falha ao ler o arquivo CSV dos discentes: %v", err)
	}

	fmt.Println("Tamanho dos registros dos discentes:", len(recordsStudents))
	fmt.Println("Linha 1 do registro dos discentes:", recordsStudents[1])

	// Converter os registros em slices de strings
	authors := make([][]string, len(recordsAuthors))
	students := make([][]string, len(recordsStudents))

	// Função para exibir o erro e continuar para a próxima linha
	handleError := func(err error, record []string) error {
		if err != nil {
			log.Printf("Erro na linha: %v - Erro: %v\n", record, err)
		}
		return err
	}

	for i, record := range recordsAuthors {
		if i == 0 {
			continue // Ignorar o cabeçalho
		}

		separator := ";"

		// Verificar se a linha contém o separador ;
		if !strings.Contains(record[14], separator) {
			separator = ","
		}

		// Verificar se a linha contém a vírgula como separador
		if !strings.Contains(record[14], separator) {
			// Se não houver separador ; nem vírgula, considerar que é um único nome de autor
			authors[i-1] = []string{record[14]}
		} else {
			authors[i-1] = strings.Split(record[14], separator)
		}

		fmt.Println("Linha", i-1, "/", len(authors), "|", len(authors[i-1]), "Autores. Nome autor 01:", authors[i-1][0])
	}

	for i, record := range recordsStudents {
		if i == 0 {
			continue // Ignorar o cabeçalho
		}
		students[i-1] = []string{removeAccents(record[1]), ";"}
		fmt.Println("Nome 1 do registro dos discentes:", students[i-1], "total de", len(students[i-1]))
	}

	// Criar um canal para enviar atualizações de progresso
	progress := make(chan string)

	// Criar uma WaitGroup para sincronizar as goroutines
	var wg sync.WaitGroup

	// Adicionar a quantidade de comparações ao WaitGroup
	wg.Add(len(authors) * len(students))

	// Goroutine para monitorar o canal de progresso e exibir informações
	go func() {
		for msg := range progress {
			fmt.Println(msg)
		}
	}()

	// Chamar a função CompareNames
	go nomecomparador.CompareNames(authors, students, &wg, progress, handleError)

	// Aguardar a conclusão de todas as comparações
	wg.Wait()

	// Fechar o canal de progresso
	close(progress)

	fmt.Println("Leitura dos arquivos CSV concluída com sucesso.")
}

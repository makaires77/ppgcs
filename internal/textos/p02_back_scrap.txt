Módulo de scrap_lattes
<<<<<<< HEAD
Estamos ajustando e corrigindo erros de uma solução em Go, que realiza o Scrap de dados de pesquisadores a partir da Plataforma Lattes do CNPq, a função central para a funcionalidade de scrap é esta: package scrap_lattes em /home/marcos/ppgcs/pkg/infrastructure/scrap_lattes/scrap_lattes.go
=======
Estamos ajustando e corrigindo erros de uma solução em Go, que realiza o Scrap de dados de pesquisadores a partir da Plataforma Lattes do CNPq, a função central para a funcionalidade de scrap é esta: package scrap_lattes em ppgcs/pkg/infrastructure/scrap_lattes/scrap_lattes.go
>>>>>>> c51253137853d9681efc37ff1382c4b6f7ed1174

No módulo de scrap no backend o scrap_lattes.go é o arquivo principal para o processo de scraping deve ser capaz de acessar a internet, coletar dados de uma fonte externa (geralmente um site ou API) e processá-los para um formato útil. Este módulo se baseia em bibliotecas Go para realizar solicitações HTTP e parsear HTML ou JSON, com gerenciamento de filas com o RabbitMQ.

A lógica para processar cada linha do CSV e realizar a raspagem dos dados do Lattes segue os passos descritos a seguir.
1. Buscar nome
1.1. acessar a página de busca de currículos em http://buscatextual.cnpq.br/buscatextual/busca.do
1.2. localizar o checkbox que tem o css selector #buscarDemais e ativar sua marcação
1.3. localizar o campo input que tem o css selector #textoBusca e nele passar a linha atual do CSV de entrada
1.4. localizar o botão que tem o css selector #botaoBuscaFiltros e clicar
1.5. disparar a requisição de busca ao servidor do CNPq, incluindo validação para erro na requisição que tenta novamente até 3 tentativas em caso de falhas
1.5.a se após as tentativas ainda assim não conseguir resposta, criar uma fila de currículos a serem buscados posteriormente e passar pro nome seguinte do arquivo CSV de entrada
1.5.b se a requisição for respondida com sucesso, disparar espera automática para carregar a página de resultados de busca
1.6. Ao final do Wait automático do passo anterior avaliar a quantidade de tags <li> que contém em seus elementos filhos os dados dos pesquisadores resultados da busca, popular uma variável com a quantidade de resultados encontrados, plotar na interface a mensagem com a quantidade de resultados encontrados e o tempo transcorrido desde a disparada do passo 1.1.

2. Clicar no link da página de resultados, conforme escolha do nome mais adequado
2.1a. Clicar no primeiro link da página de resultados caso a variável com a quantidade de resultados encontrados
2.1b. Caso a variável com a quantidade de resultados encontrados seja maior que 1, então deverá apresentar na interface a lista de nomes encontrados com seu respectivo resumo extraído de cada tag <li>
2.2. A partir do clique do usuário na interface, escolhendo qual currículo deve ser o escolhido, ou caso haja apenas uma tag <li> na página de resultados clicar no primeiro link
2.3. Disparar uma espera automática até a carga completa de um pop-up, que é aberto em javascript, trazer os dados de resumo do currículo escolhido
2.4. Localizar no pop-up o botão cujo css selector é #idbtnabrircurriculo
2.5. Clicar no botão cujo css selector é #idbtnabrircurriculo e disparar uma espera automática até que seja aberta uma nova janela, que é a janela do currículo lattes onde será realizada a extração de dados

3. Analisar a página na nova janela aberta com o currículo lattes, detectar quais seções do currículo ela apresenta, e extrair iterativamente cada elemento filho de cada uma dessas seções com as demais funções específicas por seção.

4. A primeira seção que todo currículo contém é trazida no elemento body > div.page.min-width > div.content-wrapper > div > div > div > div.infpessoa
4.1. disparar uma função auxiliar para avaliar se já existe um registro no banco de dados com o nome de pesquisador, caso não haja prosseguir com a extração, caso haja avaliar a data de atualização do currículo
4.2. no caso da data de atualização do currículo detectada na página do currículo lattes sendo extraídas ser maior que a data que já consta no banco de dados para aquele pesquisador realizar a nova extração dos elementos que mudaram com relação ao que já existe no banco de dados, usando para isso GraphQL, para complementar a extração com os dados diferentes, mantendo aqueles que já se tem e exapandindo no banco de dados com os elementos novos, atualizando aqueles que mudaram.
4.3. caso ainda não haja o nome encontrado no banco de dados proceder com a extração iterativa de cada seção, e em cada seção, extrair sucessivamente seus elementos filhos até que o elemento não possua mais filhos
4.4. armazenar em paralelo tanto no MongoDB como no Dgraph e no Neo4j mantendo entidades como seções e as arestas como os relacionamentos de elementos pais e filhos da estrutura extraída do currículo

5. Criar análise de período definido
5.1. Solicitar a definição da equipe a ser analisada ao usuário, ou escolhendo um arquivo CSV da pasta _data, ou então solicitando o upload de uma nova lista, ou entrando diretamente com uma lista de nomes
5.2. Solicitar a definição do período da análise ao usuário informando ano inicial e ano final da análise através da interface de usuário
5.3. Disparar uma querie de busca no banco de dados para avaliar a data de atualização de cada currículo
5.4. Mostrar a atualização de cada nome, e solicitar que o usuário defina se quer atualizar ou gerar relatório com as informações atuais

6. Disparar as funções de atualização
5.2. Disparar a função de busca de currículos encontrar o campo de 

7. Disparar os relatórios em tela
7.1. Retornar na interface de usuário os dados resumo à medida que eles vão sendo extraídos usando javascript e biblioteca D3.js, gerar os seguintes widgets na página de interface com o usuário
7.2. Gráfico de Colunas com o nome de cada pesquisdor encontrado na horizontal e a quantidade de artigos completos na vertical, ordenando automaticamente pelo ano de publicação
7.3. Gráfico de Colunas empilhadas com o nome de cada pesquisdor encontrado na horizontal e na vertical a soma empilhada das quantidades: quantidade de orientações de doutorado completos, quantidade de orientações de mestrado completas, e soma da quantidade de orientações de outros tipos, ordenando automaticamente pelo ano da titulação
7.4. Gráfico de Colunas empilhadas com o nome de cada pesquisdor encontrado na horizontal e na vertical a soma empilhada das quantidades: soma ponderada de pontos por nível de estrato qualis, de acordo com a tabela de pontuação por artigo completo publicado.
7.5. Gráfico de barras horizontais variando cada barra de 0 a 100%, com o percentual de artigos completos que pertencem aos níveis A1 ou A2 ou A3, do estrato de classificação do Qualis frente ao total de artigos completos publicados no período

8. Imprimir Relatórios em PDF
Neste caso específico a base de dados é de dados abertos ao público e sem restrições para a raspagem de dados, vamos agora implementar adequadamente de acordo com as suas necessidades descritas as funções realizarBusca, escolherResultado, abrirCurriculo, analisarCurriculo, extrairDados e armazenarDados que compõem a a função Processar que realiza o fluxo de trabalho em um nível alto.

<<<<<<< HEAD
Escreva o código REAL para implementar esse módulo de scrap segiundo as melhores práticas do Clean Architecture, não use exemplos ou dados fictícios, mas sim implementação REAL para produção, com validaçoes e tratamento de erros, usando códigos para apontar para os arquivos da estrutura de pastas atual. 

O módulo scrap_lattes.go recebe como entrada o arquivo /home/marcos/ppgcs/_data/in_csv/lista_dadosdocentes.csv para realizar o processamento paralelizado de requisição, descoberta, captura, persistência e exibição de dados persistidos em interface de usuário ainda a ser construída. Complemente e corrija os erros do scrap_lattes.go dado a seguir:
=======
Escreva o código REAL para implementar esse módulo de scrap segiundo as melhores práticas de Arquitetura Ports and Adapters, não use exemplos ou dados fictícios, mas sim implementação REAL para produção, com validaçoes e tratamento de erros, usando códigos para apontar para os arquivos da estrutura de pastas atual. 

O módulo scrap_lattes.go recebe como entrada o arquivo ppgcs/_data/in_csv/lista_dadosdocentes.csv para realizar o processamento paralelizado de requisição, descoberta, captura, persistência e exibição de dados persistidos em interface de usuário ainda a ser construída. 

Complemente e corrija os erros do scrap_lattes.go dado a seguir:
>>>>>>> c51253137853d9681efc37ff1382c4b6f7ed1174
import (
	"context"
	"encoding/csv"
	"fmt"
	"io"
	"os"
	"time"

	"github.com/pkg/errors"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

type ScrapLattes struct {
	// Adicione aqui os campos necessários para a conexão com bancos de dados, como clientes MongoDB, Neo4j, etc.
}
type Pesquisador struct {
...
}

func NewScrapLattes() *ScrapLattes {
	// Inicialize e retorne uma instância de ScrapLattes
	return &ScrapLattes{}
}

func (s *ScrapLattes) ScrapeData(filePath string) error {
	// Abra o arquivo CSV
	file, err := os.Open(filePath)
	if err != nil {
		return err
	}
	defer file.Close()

	// Crie um leitor CSV para ler o conteúdo do arquivo
	reader := csv.NewReader(file)

	// Faça o processamento dos dados do CSV
	for {
		record, err := reader.Read()
		if err != nil {
			// Verifique se chegou ao final do arquivo
			if err == io.EOF {
				break
			}
			return err
		}

		// Extraia as informações desejadas do registro (linha) do CSV
		// e realize as operações necessárias

		// Exemplo: exibir as informações extraídas
		fmt.Println("Nome:", record[0])
		fmt.Println("Título:", record[1])
		// ... exiba outras informações conforme necessário
		fmt.Println("---")
	}

	return nil
}

func ObterPesquisador(IDLattes string) (*Pesquisador, error) {
	// Configurar a conexão com o banco de dados MongoDB
	client, err := mongo.NewClient(options.Client().ApplyURI("mongodb://localhost:27017"))
	if err != nil {
		return nil, fmt.Errorf("falha ao criar cliente MongoDB: %v", err)
	}

	// Conectar ao servidor MongoDB
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	err = client.Connect(ctx)
	if err != nil {
		return nil, fmt.Errorf("falha ao conectar ao servidor MongoDB: %v", err)
	}

	// Desconectar do servidor MongoDB no final
	defer func() {
		if err := client.Disconnect(ctx); err != nil {
			fmt.Printf("falha ao desconectar do servidor MongoDB: %v\n", err)
		}
	}()

	// Acessar o banco de dados e a coleção
	db := client.Database("nome_do_banco_de_dados")
	collection := db.Collection("nome_da_colecao")

	// Consultar o pesquisador pelo IDLattes
	filter := bson.D{{Key: "IDLattes", Value: IDLattes}}
	var pesquisador Pesquisador

	err = collection.FindOne(ctx, filter).Decode(&pesquisador)
	if err != nil {
		if err == mongo.ErrNoDocuments {
			return nil, fmt.Errorf("pesquisador não encontrado")
		}
		return nil, fmt.Errorf("falha ao consultar pesquisador: %v", err)
	}

	return &pesquisador, nil
}

func (s *ScrapLattes) SalvarPesquisador(pesquisador *Pesquisador) error {
	// Configurar a conexão com o banco de dados MongoDB
	client, err := mongo.NewClient(options.Client().ApplyURI("mongodb://localhost:27017"))
	if err != nil {
		return fmt.Errorf("falha ao criar cliente MongoDB: %v", err)
	}

	// Conectar ao servidor MongoDB
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	err = client.Connect(ctx)
	if err != nil {
		return fmt.Errorf("falha ao conectar ao servidor MongoDB: %v", err)
	}

	// Desconectar do servidor MongoDB no final
	defer func() {
		if err := client.Disconnect(ctx); err != nil {
			fmt.Printf("falha ao desconectar do servidor MongoDB: %v\n", err)
		}
	}()

	// Acessar o banco de dados e a coleção
	db := client.Database("nome_do_banco_de_dados")
	collection := db.Collection("nome_da_colecao")

	// Inserir o pesquisador na coleção
	_, err = collection.InsertOne(ctx, pesquisador)
	if err != nil {
		return fmt.Errorf("falha ao salvar pesquisador no banco de dados: %v", err)
	}

	return nil
}

func (s *ScrapLattes) AtualizarPesquisador(pesquisador *Pesquisador) error {
	// Lógica para atualizar um pesquisador em algum repositório
	// Verifique se o pesquisador é nulo
	if pesquisador == nil {
		return errors.New("pesquisador inválido")
	}

	// Verifique se o pesquisador existe no repositório
	existe, err := PesquisadorExiste(pesquisador.IDLattes)
	if err != nil {
		return fmt.Errorf("falha ao verificar a existência do pesquisador: %v", err)
	}

	if !existe {
		return errors.New("pesquisador não encontrado")
	}

	// Atualize os campos relevantes do pesquisador no repositório
	err = AtualizarPesquisadorNoRepositorio(pesquisador)
	if err != nil {
		return fmt.Errorf("falha ao atualizar pesquisador no repositório: %v", err)
	}

	// Exemplo de mensagem de sucesso
	fmt.Println("Pesquisador atualizado com sucesso!")

	return nil
}

func PesquisadorExiste(IDLattes string) (bool, error) {
	// Implemente a lógica real para verificar se um pesquisador existe no repositório

	// Exemplo de implementação fictícia que retorna sempre true
	return true, nil
}

func AtualizarPesquisadorNoRepositorio(pesquisador *Pesquisador) error {
	// Implemente a lógica real para atualizar os campos relevantes do pesquisador no repositório

	// Exemplo de implementação fictícia que não realiza nenhuma operação
	return nil
}

func (s *ScrapLattes) PesquisadorExiste(IDLattes string) (bool, error) {
	// Lógica para verificar se um pesquisador existe no repositório
	// Cria uma conexão com o servidor do MongoDB
	client, err := mongo.Connect(context.Background(), options.Client().ApplyURI("mongodb://localhost:27017"))
	if err != nil {
		return false, fmt.Errorf("falha ao conectar ao MongoDB: %v", err)
	}
	defer client.Disconnect(context.Background())

	// Obtem uma referência para a coleção que contém os pesquisadores
	collection := client.Database("nomedobanco").Collection("nomedacolecao")

	// Cria um filtro para buscar o pesquisador com base no IDLattes
	filter := bson.M{"IDLattes": IDLattes}

	// Executa a consulta para verificar se o pesquisador existe
	count, err := collection.CountDocuments(context.Background(), filter)
	if err != nil {
		return false, fmt.Errorf("falha ao verificar a existência do pesquisador no MongoDB: %v", err)
	}

	// Verifique se o pesquisador existe com base no resultado da contagem
	existe := count > 0

	return existe, nil
}

func (s *ScrapLattes) ObterPublicacoes(pesquisador *Pesquisador) ([]Publicacao, error) {
	// Lógica para obter as publicações de um pesquisador
	// Cria uma conexão com o servidor do MongoDB
	client, err := mongo.Connect(context.Background(), options.Client().ApplyURI("mongodb://localhost:27017"))
	if err != nil {
		return nil, fmt.Errorf("falha ao conectar ao MongoDB: %v", err)
	}
	defer client.Disconnect(context.Background())

	// Obtem uma referência para a coleção que contém as publicações
	collection := client.Database("nomedobanco").Collection("nomedacolecao")

	// Cria um filtro para buscar as publicações do pesquisador
	filter := bson.M{"IDLattes": pesquisador.IDLattes}

	// Executa a consulta para obter as publicações do pesquisador
	cursor, err := collection.Find(context.Background(), filter)
	if err != nil {
		return nil, fmt.Errorf("falha ao obter as publicações do pesquisador no MongoDB: %v", err)
	}
	defer cursor.Close(context.Background())

	// Cria uma slice para armazenar as publicações encontradas
	publicacoes := []Publicacao{}

	// Itera sobre o cursor e decodifique os documentos em estruturas de Publicacao
	for cursor.Next(context.Background()) {
		var publicacao Publicacao
		if err := cursor.Decode(&publicacao); err != nil {
			return nil, fmt.Errorf("falha ao decodificar publicação do MongoDB: %v", err)
		}
		publicacoes = append(publicacoes, publicacao)
	}

	if err := cursor.Err(); err != nil {
		return nil, fmt.Errorf("erro ao iterar sobre o cursor de publicações: %v", err)
	}

	return publicacoes, nil
}

func (s *ScrapLattes) ImportarDadosCSV(filePath string) error {
	// Lógica para importar dados de um arquivo CSV
	// Abre o arquivo CSV
	file, err := os.Open(filePath)
	if err != nil {
		return fmt.Errorf("falha ao abrir o arquivo CSV: %v", err)
	}
	defer file.Close()

	// Cria um leitor CSV para ler o conteúdo do arquivo
	reader := csv.NewReader(file)

	// Faz o processamento dos dados do CSV
	for {
		record, err := reader.Read()
		if err != nil {
			// Verifica se chegou ao final do arquivo
			if err.Error() == "EOF" {
				break
			}
			return fmt.Errorf("falha ao ler o registro do arquivo CSV: %v", err)
		}

		// Realiza as operações necessárias com os dados do registro
		// Por exemplo, você pode salvar os dados em uma estrutura de dados ou executar outras ações

		// Exemplo: exibir as informações extraídas
		fmt.Println("Nome:", record[0])
		fmt.Println("Título:", record[1])
		// ... exiba outras informações conforme necessário
		fmt.Println("---")
	}

	return nil
}

func (s *ScrapLattes) ExportarDadosCSV(filePath string) error {
	// Lógica para exportar dados para um arquivo CSV
	// Obtenha os dados a serem exportados
	dadosExportados, err := ObterDadosExportadosDoBancoDeDados()
	if err != nil {
		return fmt.Errorf("falha ao obter os dados exportados do banco de dados: %v", err)
	}

	// Crie o arquivo CSV para escrita
	file, err := os.Create(filePath)
	if err != nil {
		return fmt.Errorf("falha ao criar o arquivo CSV: %v", err)
	}
	defer file.Close()

	// Crie um escritor CSV
	writer := csv.NewWriter(file)

	// Escreva os dados no arquivo
	for _, linha := range dadosExportados {
		err := writer.Write(linha)
		if err != nil {
			return fmt.Errorf("falha ao escrever no arquivo CSV: %v", err)
		}
	}

	// Certifique-se de chamar o método Flush para gravar os dados no arquivo
	writer.Flush()

	if err := writer.Error(); err != nil {
		return fmt.Errorf("falha ao gravar os dados no arquivo CSV: %v", err)
	}

	return nil
}

func LerArquivoCSV(filePath string) ([]string, error) {
	// Lógica para ler um arquivo CSV e retornar os dados

	// Implemente a lógica real para ler o arquivo CSV e extrair os dados
	// Aqui está um exemplo simples que retorna dados fictícios:
	dados := []string{"linha 1", "linha 2", "linha 3"}

	return dados, nil
}

func (s *ScrapLattes) ObterPesquisadorPorIDLattes(IDLattes string) (*Pesquisador, error) {
	// Lógica para obter um pesquisador do banco de dados pelo IDLattes

	// Implemente a lógica real para obter o pesquisador pelo IDLattes
	// Aqui está um exemplo simples que retorna um pesquisador fictício:
	pesquisador := &Pesquisador{
		Nome:     "Fulano de Tal",
		Titulo:   "Doutor",
		IDLattes: IDLattes,
		Formacao: []string{"Bacharelado", "Mestrado", "Doutorado"},
		Publicacoes: []Publicacao{
			{Titulo: "Publicação 1", Ano: "2022"},
			{Titulo: "Publicação 2", Ano: "2023"},
		},
	}

	return pesquisador, nil
}

func (s *ScrapLattes) SalvarPesquisadorNoBancoDeDados(pesquisador *Pesquisador) error {
	// Lógica para salvar um pesquisador no banco de dados

	// Implemente a lógica real para salvar o pesquisador no banco de dados

	return nil
}

func (s *ScrapLattes) AtualizarPesquisadorNoRepositorio(pesquisador *Pesquisador) error {
	// Lógica para atualizar um pesquisador no repositório

	// Implemente a lógica real para atualizar o pesquisador no repositório

	return nil
}

func (s *ScrapLattes) VerificarExistenciaPesquisadorNoBancoDeDados(IDLattes string) (bool, error) {
	// Lógica para verificar se um pesquisador existe no banco de dados

	// Implemente a lógica real para verificar a existência do pesquisador no banco de dados

	return true, nil
}

func (s *ScrapLattes) ObterPublicacoesDoPesquisador(pesquisador *Pesquisador) ([]Publicacao, error) {
	// Lógica para obter as publicações de um pesquisador

	// Implemente a lógica real para obter as publicações do pesquisador

	return pesquisador.Publicacoes, nil
}

func (s *ScrapLattes) SalvarDadosImportadosNoBancoDeDados(dados []string) error {
	// Lógica para salvar os dados importados no banco de dados

	// Implemente a lógica real para salvar os dados importados no banco de dados

	return nil
}

func EscreverDadosNoArquivoCSV(filePath string, dados []string) error {
	// Lógica para escrever dados em um arquivo CSV

	// Implemente a lógica real para escrever os dados no arquivo CSV

	return nil
}
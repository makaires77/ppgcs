Estou em VScode e preciso criar um módulo em Go, usando de multiprocessamento e paralelização em GPU para achar nomes de docentes dentro de uma lista de autores de artigos, porém os nomes podem vir em diferentes formatos então será preciso aplicar uma análise fuzzy para combinar formas e inferir quais nomes de discente estão na lista de autores de cada artigo. 

O módulo de análise de similaridade deve conter funções de leitura de dados em CSV e em XLSX, considerando que nos dados de entrada temos cada artigo como uma linha no arquivo CSV: _data\powerbi\publicacoes.csv que contém os seguintes rótulos na primeira linha: idLattes, nome, tipo, titulo_do_capitulo, idioma, titulo_do_livro, ano, doi, pais_de_publicacao, isbn, nome_da_editora, numero_da_edicao_revisao, organizadores, paginas, autores, autores-endogeno, autores-endogeno-nome, tags, Hash, tipo_producao, natureza, titulo, nome_do_evento, ano_do_trabalho, pais_do_evento, cidade_do_evento, classificacao, periodico, volume, issn, estrato_qualis, editora, numero_de_paginas, numero_de_volumes; onde o nome do docente é a coluna de índice 1 e a lista de autores é a coluna de índice 14, então a informação que queremos gerar é o percentual de colaboração entre discentes e docentes do programa de pós-graduação em ciências da saúde, contata pelo número total de artigos onde é encontrada pelo menos uma similaridade acima do treshold 0.8 para os pares de strings formados por cada nome de autor e cada nome de discente; a lista de orientadores e a lista de discentes é lida a partir das duas colunas contidas no arquivo _data\powerbi\lista_orientadores-discentes.csv que não contém rótulos de colunas mas que é formado pelo nome completo do orientador e nome completo do discente. 

o módulo de análise de similaridade deve conter uma função de preprocessamento considerando que na lista de discentes temos nomes completo de discente, e antes de compararmos devemos passar todas letras para minúsculas, retirar toda acentuação gráfica, retirar todos as partes de string a seguir: " de ", " da ", " do ", " e ", " dos ", antes de gerar a fila de pares a serem comparados que será controlada pelo RabbitMQ. 

o módulo de análise de similaridade deve conter uma função de preprocessamento para identificar o SOBRENOME de cada nome completo e retornar os nomes completos convertidos na forma SOBRENOME, iniciais dos nomes restantes que compõem o nome completo.

o módulo de análise de similaridade deve ter uma função de estimativa de duração que deve contar a quantidade de nomes de docentes e contar a quantidade de nomes de autor para avaliar o tempo de duração da análise completa mensurando o tempo total de duração de cada análise a partir do cálculo de análise combinatória que menure todas as comparações que devem ser analisadas para calcular a similaridade entre cada par de string discente/autor, calculando o somatório total da quantidade de autores em cada lista de autores de cada artigo combinada com o total de lista de nomes de discentes.

O módulo de análise de similaridade deve ter como função principal realizar a comparação combinatória fuzzy entre cada nome de discente pré-processado e cada nome de autor da lista de autores de cada artigo de cada docente usando a seguinte função:
func OSADamerauLevenshteinDistance(str1, str2 string) int
